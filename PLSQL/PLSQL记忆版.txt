数据字典

变量
1、变量的声明
var_name [constant] type [not null] [:=value]

2、变量类型
1) CHAR [(maximum_size[CHAR | BYTE])] 定长字符串,
maximum_size指定字符串的长度一次分配这么多
CHAR|BYTE以字符还是字节做单位
2) VARCHAR2 (maximum_size[CHAR | BYTE])变长字符串
maximum_size最大的字符长度,实际长度就是字符串的存储元素长度
3) rowid 伪列,用于存储每一行数据的存储地址二进制值
4) urowid 通用伪列可存储物理逻辑和非oracle的rowid
5) NUMBER(p,s) 精度和刻度 精度是允许的值的总长度,
刻度是小数点右边的数字位个数,可为负表示由小数点向左
6) PLS_INTEGER和BINARY_INTEGER 都是以二进制补码存储
的数字,区别是PLS在溢出时会发出异常
用法 num1 pls_interger :=1
7) %type 基于已有的变量类型
8) %rowtype 基于数据库表中的记录类型
9) DATE时间类型 SYSDATE系统定义当前的时间
10) 布尔类型 boolean 取值为TRUE FALSE NULL
11) char(10)换行 char(13)回车
一般连着用，表示一个完整的回车换行

3、用户定义子类型
SUBTYPE subtype_name is base_type[(constraint)] [not null]
在标准类型的基础上进一步约束创建的新类型
subtype numtype is number(1,0) not null;

4、逻辑运算符
and or not

PL/SQL控制语句
1、if语句
if  condition then
else 
end if;

if condition then 
elsif  condition then
elsif  condition then
else 
end if;

2、case语句
1) 简单case语句
case variable
   when  vaule1 then
   when  vaule2 then
   else
end case;

2) 搜索case语句
case [{true, false}]
    when condition then
    when condition then
	else
end case;
true和false分别表示条件满足和不满足时运行
when子句

3、loop循环
loop
    statement;
end loop;

退出
exit;直接退出循环
exit when condition; 在什么条件下退出
continue退出当前这一次循环

4、while 循环
while condition
loop 
end loop;

5、for循环
for loop_index in [reverse] lowest ..hightest
loop
end loop;
reverse 表示反向从高到低
for i in 1..3
loop
end loop;

6、null语句
什么都不做，占位符

数据定义语言DDL data definition language
主要由create、alter和drop组成

create table hr.workcenter()
方案名.表名称 方案名默认情况为当前方案

指定约束
1、not null 指定列不接受null值
2、unique 指定在列中的每一个值必须唯一
3、default default_value 指定列的默认值

创建表副本
create table提供的as select语句,允许从一个现有
的表创建新表,包含原表的字段属性、约束
create table <newtable> as select {*|column(s)}
from <oldtable> [where <condition>];

创建主键约束
在列类型的后面使用primary key指定主键
更好的编程习惯是使用constraint关键字
invoice_id number constraint invoice_pk primary key
invoice_pk 使用的是约束名
invoice_id number constraint invoice_pk not null

在表级别使用constraint约束
constraint invoice_pk primary key(invoice_id)
constraint invoice_pk unique(vendor_id)

创建外键约束
[constraint constraint_name] references table_name
(column_name) [on delete {cascade|set null] 

表级别的外键约束
constraint constraint_name foreign key(vendor_id) 
references vendors(vendor_id) on delete cascade

创建检查约束
invoidce_total number(9,2) check(invoice_total
>0 and invoice_total<=5000)

表级别的检查约束
constraint invoidce_total check(invoice_total>0)

修改表
修改表列
alter table [schema_name.]table_name
{ 
  add column_name data_type [column_attributes]|
  drop column column_name|
  modify column_name data_type[column_attributes]
}
alter table tab add col_name number check(col_name>5)
重命名表列
alter table tab rename column name1 to name2把1给2命名

修改约束
alter table table_name
{
  add constraint con_name con_defintion [disable]|
  drop constraint con_name |
  enable [novalidate] con_name |
  disable con_name
}
使用disable表示不启用这个约束
novalidate表示仅对新的记录应用约束

disable validate:禁用约束,对已存在的记录进行约束
disable novalidate禁用约束,不验证已存在的记录

索引
创建索引
create index index_name on tab(ename)
原理:rowid是用来唯一标志一条记录所在物理位置的一个
id号,在创建索引时,会创建一个格式为(索引列值,rowid)

重命名索引
alter index idx_name rename to idx_name2;

删除索引
drop index idx_name

视图
create [or replace] VIEW view[别名1,别名2] 
as subquery
例子:
create or replace view sumdept(名称,薪资)
as select dept.name, sum(emp.sal)sumsal
from emp,dept where ..

删除视图drop view sumdept

查询数据表
指定条件查询
select *|{[distinct] column|expression 别名}
from table [where conditions]

比较操作符
> >= < <= = <>

使用范围操作符
between and操作符  in操作符 like使用通配符
where sal>=1500 and sal<=2500
where job in('a','b','c')
where mgr =75 or mgr = 45等于in

like对字符串进行匹配通配符
%通配符 表示零个或者多个字符
_通配符 表示一个字符

判断null值
is null    is not null

使用逻辑组合
and与 or或 not非

排序
order by {column,expr} [asc | desc] 升序或者降序
空值 升序时在最后,降序排序时在最前边

使用函数
select function_name[(arg1,arg2,...)]

统计函数
1、sum函数 特定字段的总和
2、avg函数 计算平均值
3、min函数 字段的最小值
4、max函数 字段的最大值
5、count函数 统计值的数目
6、count(*) 统计查询结果的记录数量

分组统计
group by col1,col2 order by column
select sum(sal) 薪资, avg(sal) 平均值
from emp group by deptno order by sum(sal)
order by 只能使用分组函数或分组列排序

如果对分组结果进一步过滤,使用having子句
group by depto,job having sum(sal) > 20

使用dual表
dual是所有用户可用的表,它只有一行一列
例如: select sysdate from dual 查询当前时间
当前系统用户select user from dual

rownum伪列

rownum伪列是oracle先查到结果集加上去一个
伪列结果会添加一个从1开始的序列号
select rownum,a from emp where rownum<=10

但是查询rownum>10不会得到结果,因为每次
查询时每次第一条为1不符合时,下一条编号为1
如果想查询使用子查询即可

复杂查询
多表连接查询
1、内连接
select x.a, x.b, y.a from emp x, dept y
where x.a = y.a and x.b =100
ANSI SQL表示方式
from x inner join y on x.a = y.a

2、外连接
右外连接
select t1.col,t2.col from t1,t2 
where t1.col(+) = t2.col
左外连接
select t1.col,t2.col from t1,t2 
where t1.col = t2.col(+)

使用ANSI SQL表示方式
from t1 [left|right|full outer join t2 on
(t1.col = t2.col)]

3、交叉连接
笛卡尔连接两个表的记录相乘
如果不指定连接条件为交叉连接
ANSI SQL为
from t1 cross join t2

4、自然连接
两个表有相同名字和数据类型的列,可自行连接
from t1 natural join t2

子查询
相关子查询:子查询的的执行一栏与外部查询的数据,
外部查询一行,子查询一次
非相关子查询:子查询独立于外部查询,子查询总共执
行一次,之后交给外部查询

相关子查询根据结果分为
1、单行单列子查询,通常与比较运算符比如=、>、<、
<=、>=联合使用
2、多行单列子查询,与any、all和in联用
3、多列子查询 通常与update联用

in 等于列表中的任何成员
any 比较子查询返回的每个值
all 比较子查询返回的每个值

<any  小于最大值
>any  大于最小值
=any  等同于in
<all  小于最小值
>all  大于最大值

相关子查询举例
select  e1.empno, e1.ename, e1.depto from emp el
where e1.sal > (select avg(sal) from emp e2 where
e2.deptno = e1.deptno) 
查询员工大于该部门所有的员工的平均值

表集合操作
union intersect minus(差集)
union all不消除重复行

插入当行记录
insert into table [(colum [,colum...])]
values (value, [,value]);

插入默认值和空值
空值使用null 日期类和字符串类使用空白符''
默认值使用default

使用子查询插入多行数据
insert into table [(colum [,colum...])] subquery

更新单行数据
update table set columns = value[(colum [,colum...])]
[where condition]
upate tab x set (x.sal,x.comm) =(select sal,comm)
from tab2 y where x.em = y.em) where x.em =5;

merge 多个表合并

删除记录
delete [from] table [where condition]

使用子查询删除记录
使用in 和exists
delete from tab x where exists (select 1 from 
emp_copy where emp = x.empno)

truncate table table_name
删除整个表,比delete快同时属于ddl语句不产生撤销消息

创建和使用同义词
create [public] synonym synonym_name for object 
给object对象创建一个同义词
同义词能够简化目标对象的访问便于查阅表的所有者
public 表示能够被所有用户访问

记录和集合
1、记录
1) 定义记录类型
TYPE type_name is record
( field_declaration,
  [,field_declaration]...);
field_declaration语法为
field_name field_type [[not null]{:= |default} expression]

2) 记录变量赋值
record_name.field :=expression

3) insert插入记录
insert into tab values val_record;
insert delete drop都需要commit更新

4) update使用记录类型
关键字row代表完整的一行数据
update tab set row = val_record where...;
但是 val_record不能是子查询

5) returning子句返回记录
DML包含returning返回被insert delete drop
影响的行,同时可以将受影响的行保存到一个记录或记录集合
update tab set row = val_record where...
returning deptno,dname,loc into record2;

2、集合
索引表
1)type type_name as table of element_type [not null]
index by[pls_integer |binary_integer|varchar2(size)]

2)使用exists函数判断是否存在数据项
IF v_emp.exists(8) then  end if;

嵌套表
1)索引表仅仅是内存表,嵌套表可以存储到数据库中

2)type type_name as table of element_type [not null]
元素的下标从1开始

3)初始化 nameinfo type_name :=type_name(' ', '' ,null)

4)操纵嵌套表
extend方法用于扩充指定元素个数默认用空值

5)数据库添加嵌套表
create or replace type type_name as table of 
element_type [not null]

变长数组
1) type type_name is varray(size_limit) of element_type 
[not null] 定义了一个最大长度为limit的变长数组

2) 操纵变长数组 使用extend扩展数组大小

3) 添加到数据库 create or replace

集合方法
1) EXISTS(n)如果集合的第n个成员存在，则返回true
2) COUNT返回已经分配了存储空间即赋值了的成员数量
3) FIRST返回成员的最低下标值
4) LAST返回成员的最高下标值
5) PRIOR(n)返回下标为n的成员的前一个成员的下标。如果没有则返回NULL
6) NEXT(n)返回下标为n的成员的后一个成员的下标。如果没有则返回NULL
7) TRIM删除末尾一个成员
8) TRIM(n) 删除末尾n个成员
9) DELETE：删除所有成员
10) DELETE(n) 删除第n个成员
11) DELETE(m, n) 删除从m到n的成员
12) EXTEND 添加一个null成员
13) EXTEND(n) 添加n个null成员
14) EXTEND(n,i) 添加n个成员，其值与第i个成员相同
15) LIMIT 返回在varray类型变量中出现的最高下标值

批量处理
1、forall
forall index in lower_bound..upper_bound sql_statement;
主要针对的INSERT UPDATE DELETE语句将所有的操作合并成
一个sql 注意没有loop
批量处理查询被影响的行是用sql%bulk_rowcount

2、bulk collect into
在select into, fetch into, returning into 使用
...bulk collect into collection_name,[collection_name]
例如
select empno, ename bulk collect into nums,names from emp;

sql内置函数
1、字符串函数
1) 大小写转换
upper 字符串变大写
lower 字符串变小写
initcap 字符串每个单词的首字母变为大写

2) 字符串处理函数
concat(st1,st2) 连个字符串连接成一个
length(st) 字符串长度
lpad(st,cnt,ch)用给定的字符从左填充字符串到给定的长度
rpad(st,cnt,ch)用给定的字符从右填充字符串到给定的长度
trim(st) 去除一个字符串头和尾的字符
substr(st,x,[y])
   x为0表示从字符串的开始位置
   x为正数表示从左边向右边计算
   x为负数从尾部向左计算
   没有y表示整个字符串长度
   y表示字符长度
instr 从一个字符串中查找一个给定数字的数字位置

3) 字符串替换函数
replace(st,searchstr,[replacestr]) 替换st中所有的searchstr
没有replacestr则所有的searchstr会被删除
translate(st,fromstr,tostr) tostr不能省也不能是空格
   定义同replace
   
2、数字型函数
round(x,y) 四舍五入x的值为y位小数位
trunc(x,y) 截断为y位小数位
mod(x,y) x除以y的余数

3、类型转换函数
to_char 转换为字符串
to_number 转换为数字型
to_date 转换为日期型

4、分组函数
avg 列值的平均值
count 查询的行数
sum 列的和
min 列的最小值
max 列的最大值

5、其他函数
nvl(exp1,exp2) 如果exp1为NULL,转化为表达式2的值
nvl2(exp1,exp2,exp3)exp1不为空返回exp2的值
      如果exp1为空返回exp3
nullif(exp1,exp2)两个表达式相等返回null不想等
     返回第一个表达式
coalesce(exp1,exp2,exp3)从多个表达式中返回第一个
      空表达式
decode(job,'职员', 1.15*sal, '销售',1.2*sal)
第一个为查询条件 第二个是当是该条件时执行

游标概念
 在PL/SQL块中执行SELECT、INSERT、DELETE和UPDATE语句时，
 ORACLE会在内存中为其分配上下文区,即缓冲区
 游标是指向该区的一个指针,或是命名一个工作区，
 或是一种结构化数据类型

 对于不同的SQL语句，游标的使用情况不同：
SQL语句                   游标
非查询语句                隐式的
结果是单行的查询语句      隐式的或显示的
结果是多行的查询语句      显示的
 
1、处理显式游标
显式游标处理需四个PL/SQL步骤
1)定义/声明游标
CURSOR cursor_name[(parameter[, parameter]…)] 
 [RETURN datatype] IS select_statement for update 
 [of (column_list)] [nowait]
游标参数只能为输入参数,其格式为： 
parameter_name [IN] datatype [{:= | DEFAULT} expression]
所有游标的形参形式为in模式,不能约束长度如NUMBER(4),CHAR(10)
[RETURN datatype]是可选的,表示游标返回数据的数据
它严格与select_statement中的选择列表数据类型上匹配

2)打开游标
查询结果放入工作区，并且指针指向工作区的首部，标识游标结果集合
OPEN cursor_name[([parameter =>] value[, [parameter =>] value]…)];
不能用OPEN 语句重复打开一个游标 =>为参数赋值，使用的是关键字方法

3)提取游标数据
检索结果集合中的数据行，放入指定的输出变量
FETCH cursor_name INTO {variable_list | record_variable };
检索到最后一行数据,再次执行FETCH语句,游标属性%NOTFOUND置为TRUE

批量处理游标数据需要存储到一个集合中
fetch cur_name bulk into set_name
如果游标数据量较多,可以使用limit限制数量
fetch cur_name bulk into set_name limit numbers

4)关闭游标
CLOSE cursor_name;

5)游标属性
Cursor_name%FOUND     布尔型属性，当最近一次提取游标操作FETCH成功则为 TRUE,否则为FALSE；
Cursor_name%NOTFOUND   布尔型属性，与%FOUND相反；
Cursor_name%ISOPEN     布尔型属性，当游标已打开时返回 TRUE；
Cursor_name%ROWCOUNT   数字型属性，返回已从游标中读取的记录数。

6)游标的FOR循环
FOR index_variable IN cursor_name[(value[, value]…)] LOOP
  -- 游标数据处理代码
END LOOP; 
for会隐式打开和关闭游标

7)修改游标数据
游标修改和删除操作是指在游标定位下,修改或删除表中指定的数据行
要求游标查询语句中必须使用FOR UPDATE选项

如果另一个会话已对活动集中的行加了锁，那么SELECT FOR UPDATE操作一直
等待到其它的会话释放这些锁后才继续自己的操作，对于这种情况，当加上
NOWAIT子句时，如果这些行真的被另一个会话锁定，则OPEN立即返回并给出：
ORA-0054 ：resource busy  and  acquire with nowait specified.

如果使用FOR UPDATE声明游标，则可在DELETE和UPDATE 语句中使用
WHERE CURRENT OF cursor_name子句，
修改或删除游标结果集合当前行对应的数据库表中的数据行

举例
DECLARE 
    V_deptno employees.department_id%TYPE :=&p_deptno;
    CURSOR emp_cursor 
  IS 
  SELECT employees.employee_id, employees.salary 
    FROM employees WHERE employees.department_id=v_deptno
  FOR UPDATE NOWAIT;
BEGIN
    FOR emp_record IN emp_cursor LOOP
    IF emp_record.salary < 1500 THEN
        UPDATE employees SET salary=1500
    WHERE CURRENT OF emp_cursor;
    END IF;
    END LOOP;
--    COMMIT;
END; 

2、处理隐式游标
1) 对于非查询语句:修改、删除操作,由ORACLE系统自动地为这些操作设置游标并创建其工作区，
这些由系统隐含创建的游标称为隐式游标，隐式游标的名字为SQL

2) 对于隐式游标的操作，如定义、打开、取值及关闭操作，都由ORACLE 系统自动地完成，无需用户进行处理

3) 用户只能通过隐式游标的相关属性，来完成相应的操作
隐式游标属性     
属性          值          SELECT        INSERT       UPDATE            DELETE
SQL%ISOPEN                FALSE         FALSE        FALSE             FALSE
SQL%FOUND     TRUE        有结果                     成功              成功
SQL%FOUND     FALSE       没结果                     失败              失败
SQL%NOTFOUND  TRUE        没结果                     失败              失败
SQL%NOTFOUND  FALSE       有结果                     成功              失败
SQL%ROWCOUNT         返回行数,值为1    插入的行数  修改的行数        删除的行数

NO_DATA_FOUND和%NOTFOUND的区别
SELECT … INTO 语句触发NO_DATA_FOUND
当一个显式游标的WHERE子句未找到时触发%NOTFOUND
当UPDATE或DELETE语句的WHERE子句未找到时触发SQL%NOTFOUND

3)游标变量
游标变量是动态的，而游标是静态的。游标只能与指定的查询相连，
即固定指向一个查询的内存处理区域，而游标变量则可与不同的查
询语句相连，它可以指向不同查询语句的内存处理区域

定义游标变量类型时，可以采用强类型定义和弱类型定义两种
强类型定义必须指定游标变量的返回值类型，而弱类型定义则不说明返回值类型

在PL/SQL中,指针使用REF作为前缀定义的,因此游标变量类型为 REF CURSOR
SYS_REFCURSOR为系统定义的弱类型的游标变量类型

声明一个游标变量的两个步骤：
步骤一：定义一个REF CURSOU数据类型，如：
TYPE ref_cursor_type IS REF CURSOR;
步骤二：声明一个该数据类型的游标变量，如：
cv_ref REF_CURSOR_TYPE;

步骤一的语法
TYPE ref_type_name IS REF CURSOR
[RETURN return_type];
其中：ref_type_name为新定义的游标变量类型名称；
  return_type 为游标变量的返回值类型，它必须为记录变量。
  
游标变量操作
与游标一样，游标变量操作也包括打开、提取和关闭三个步骤。
1)打开游标变量
打开游标变量时使用的是OPEN…FOR 语句。格式为：
OPEN cursor_variable_name  FOR select_statement;
其中：cursor_variable_name为游标变量,OPEN…FOR语句可以在关闭当前
的游标变量之前重新打开游标变量，而不会导致CURSOR_ALREAD_OPEN异常错误
 
2)提取游标变量数据
FETCH cursor_variable_name INTO {variable [, variable]…| record_variable}

3)关闭游标变量
CLOSE cursor_variable_name 

3、游标异常
常见的两个游标异常
1)使用一个未打开的游标或者删除的游标会出现INVALID_CURSOR
2)游标FETCH数据与结果不匹配 rowtype_mismatch

事务处理和锁定
事务的四个属性acid
原子性、一致性、隔离性、持久性

在oracle中,一个事务执行,需要显示commit提交

1) commit [comment text] comment添加注释
commit comment 'sagfag'
加上事务上的所有锁及事务所占有的一切资源

2) rollback [to savepoint]

3) savepoint savepoint_name
savepoint a;
insert into dept values(dept);
savepoint b; 

创建函数
CREATE [OR REPLACE] FUNCTION function_name
 (arg1 [ { IN | OUT | IN OUT | nocopy }] type1 [DEFAULT value1],
 [arg2 [ { IN | OUT | IN OUT | nocopy}] type2 [DEFAULT value1]],
 ......
 [argn [ { IN | OUT | IN OUT | nocopy }] typen [DEFAULT valuen]])
 [ AUTHID DEFINER | CURRENT_USER ]
 [pragma autonomous_transalation;]
RETURN return_type
 IS | AS
    <类型.变量的声明部分>
BEGIN
    执行部分
    RETURN expression
EXCEPTION
    异常处理部分
END function_name; 　

IN,OUT,IN OUT是形参的模式
1) 若省略，则为IN模式
2) IN模式的形参只能将实参传递给形参，进入函数内部，但只能读不能写，函数返回时实参的值不变。
3) OUT模式的形参会忽略调用时的实参值（或说该形参的初始值总是NULL），但在函数内部可以被读或写，函数返回时形参的值会赋予给实参。
4) IN OUT具有前两种模式的特性，即调用时，实参的值总是传递给形参，结束时，形参的值传递给实参
5) 对于IN模式的实参可以是常量或变量，但对于OUT和IN OUT模式的实参必须是变量。

nocopy编译提示
默认情况下,pl/sql通过引用来传递in参数
out和in out使用的是值引用的
为了使他们具有引用传递,使用nocopy
parameter_name in out nocopy datatype;

使用前向声明
函数头后边加上分号

子程序自治事务
程序调用子程序,子程序具有commit或者rollback语句
会提交主程序的修改,如果想不影响主事务的状态,使用
pragma autonomous_transalation;

函数的调用
1) 位置表示法
2) 名称表示法
3) 组合传递

传址法是指在调用函数时，将实际参数的地址指针传递给形式参数
传值法是指将实际参数的数据拷贝到形式参数
默认时，输出参数和输入/输出参数均采用传值法

建立存储过程
CREATE [OR REPLACE] PROCEDURE procedure_name
([arg1 [ IN | OUT | IN OUT ]] type1 [DEFAULT value1],
 [arg2 [ IN | OUT | IN OUT ]] type2 [DEFAULT value1]],
 ......
 [argn [ IN | OUT | IN OUT ]] typen [DEFAULT valuen])
    [ AUTHID DEFINER | CURRENT_USER ]
{ IS | AS }
  <声明部分>
BEGIN
  <执行部分>
EXCEPTION
  <可选的异常错误处理程序>
END procedure_name;

AUTHID 这个过程使用谁的权限运行．
默任情况下,存储过程会作为调用者的过程运行，但是具有设计者的特权

删除过程和函数
DROP PROCEDURE [user.]Procudure_name;
DROP FUNCTION [user.]Function_name

使用过程与函数的原则：
1) 如果需要返回多个值和不返回值，就使用过程；如果只需要返回一个值，就使用函数。
2)过程一般用于执行一个指定的动作，函数一般用于计算和返回一个值。
3)可以SQL语句内部（如表达式）调用函数来完成复杂的计算问题，但不能调用过程。所以这是函数的特色

动态sql
1、pl/sql只能执行DML语句,因此要执行DDL语句,必须要借助动态sql

2、支持sql语句也支持pl/sql语句块
EXECUTE IMMEDIATE dynamic_string [into {define_variable[,define_variable]...|record}]
[USING [IN|OUT|INOUT] bind_argument... returning into bind_argument[,bind_argument]...]

3、into子句用于单行查询将单行记录连接到变量中

4、使用绑定变量
绑定变量可以是集合、大型对象、对象类型实例及ref类型,但是不能是
PL/SQL定义的类型,如boolean和索引表

sql字符串中使用冒号加占位符名称指定占位符,然后using子句根据占位符
的顺序依次指定要绑定的变量

因为不能使用表名和列名作为绑定变量,可使用字符串链接成sql

5、DML语句中的insert、update、delete语句都可以使用
returing into获取受影响的字段
sql := 'update emp set sal=sql*(1+:percent)'||'where empno
=:empno returning sal into :salary';
execute immediate sql using percent,empno returning into sal;

6、指定参数类型
默认的参数类型是in模式,参数类型只在创建过程或者函数时有用
plsql := 'begin create_dept(:a,:b.:c);end;';
execute immediate plsql using in out deptno, name,loc;

7、多行查询语句
需要三个步骤:open for、fetch和close语句
1)打开游标变量
OPEN cursor_name FOR dynamic_string using bind_argument;
 
2)提取游标变量数据
FETCH cursor_name  INTO {variable [, variable]…| record_variable}

3)关闭游标变量
CLOSE cursor_name 

8、批量绑定
oracle有三种支持bulk子句,分别是execute immediate、
fetch和forall

1)execute immediate dynamic_string [[bulk collect into
define_variable[,define_variable...]][using bind_var]
[returning bulk collect into bind_variable]

2)fetch dynamic_cursor bulk collect into define_var

3)forall index in lowerbound..upperbound execute
immediate dynamic_string using bind_argument|
bind_argument(index) returning bulk collect into bind_argument

包
create or replace package name as
包体
create or replace package body name as

异常
1、定义异常 exception_name exception;
2、抛出异常 raise exception_name；
3、处理异常
exception 
     when exception_name1 then
	    statements;
	 when exception_name2 then
	    statements;
	 when others then
	 
4、sqlcode函数和sqlerrm函数
sqlcode函数总是返回当前的错误代码,比如用户自定义的异常
总是返回1
sqlerrm用于返回错误消息文本,对于用户自定义异常,返回
user defined exception

数据字典
1、user_objects 包含当前用户的所有对象信息,比如对象的名称、
创建时间、最后被修改时间、对象类型、对象的有效状态

2、user_source 当前登录用户拥有的对象源代码,该师徒包含名称、
类型、描述等信息

3、user_errors 当前用户所发生错误信息,包含对象名称、类型、
序列、发生错误的位置以及文本等字段

4、user_dependencies视图查看直接依赖

数据字典根据前缀分成四类
1、user:用户所创建对象对应数据字典表如user_objects user_tables
2、all:用户所能访问对象对应的数据字典表all_objects all_tables
3、dba:所有对象的数据字典表如dba_objects dba_tables
4、v$:描述系统性能的相关的数据字典

两个数据字典视图提供约束的详细信息
1、user_constraint对于表的每一个约束,在表中都有一条记录描述
这个约束,如果知道约束名,就可以知道约束
2、user_cons_columns视图中显示约束的字段名称 